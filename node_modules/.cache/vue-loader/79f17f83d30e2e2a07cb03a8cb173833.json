{"remainingRequest":"/Users/aaronprice/Desktop/DGM4790/FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/aaronprice/Desktop/DGM4790/FrontEnd/src/components/Admin.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/aaronprice/Desktop/DGM4790/FrontEnd/src/components/Admin.vue","mtime":1588013547657},{"path":"/Users/aaronprice/Desktop/DGM4790/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/aaronprice/Desktop/DGM4790/FrontEnd/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/aaronprice/Desktop/DGM4790/FrontEnd/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/aaronprice/Desktop/DGM4790/FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/aaronprice/Desktop/DGM4790/FrontEnd/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmV4cG9ydCBkZWZhdWx0IHsKICBkYXRhOiAoKSA9PiAoewogICAgaWRJbnB1dDogIiIsCiAgICB1cGRhdGVkQXQ6ICIiLAogICAgbmFtZTogIiIsCiAgICBLRDogIiIsCiAgICBHYW1lclRhZzogIiIsCiAgICBQbGF0Zm9ybTogIiIsCiAgICBpZDogIiIsCiAgICBzZWFyY2hzdHJpbmc6ICJha3ByaWNlOTUiLAogICAgY3JlYXRlTmFtZTogIiIsCiAgICBjcmVhdGVHYW1lclRhZzogIiIsCiAgICBjcmVhdGVLRDogIiIsCiAgICBjcmVhdGVQbGF0Zm9ybTogIiIsCiAgICBkZWxldGVJRDogIiIKICB9KSwKICBtZXRob2RzOiB7CiAgICBvbkRvbmUoKSB7CiAgICAgIHJldHVybiBjb25zb2xlLmxvZygiRG9uZSIgKyAiZGlkIGl0IHdvcms/Iik7CiAgICB9CiAgfQp9Owo="},{"version":3,"sources":["Admin.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Admin.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"page\">\n    <v-container>\n      <v-row>\n        <v-col>\n          <h1>GraphQl CRUD</h1>\n          <v-card-title>Get an Item by ID</v-card-title>\n          <v-text-field v-model=\"idInput\" label=\"Enter Item ID...\"></v-text-field>\n        </v-col>\n      </v-row>\n      <!-- Apollo watched Graphql query -->\n      <ApolloQuery :query=\"require('../graphql/getStat.gql')\" :variables=\"{ idInput }\">\n        <template v-slot=\"{ result: { loading, error, data } }\">\n          <!-- Loading -->\n          <div v-if=\"loading\" class=\"loading apollo\">Loading...</div>\n\n          <!-- Error -->\n          <v-alert type=\"error\" v-else-if=\"error\" class=\"error apollo\">An error occured</v-alert>\n\n          <!-- Result -->\n          <div v-else-if=\"data\" class=\"result apollo\">\n            <v-row>\n              <v-col cols=\"3\" v-for=\"(item, i) in data\" :key=\"i\">\n                <div class=\"mx-auto-name\" id=\"test\">\n                  <v-card class=\"mx-auto\" max-width=\"350\">\n                    <v-card-text>\n                      <p>ID: {{ item.id }}</p>\n                      <p>Updated At: {{ item.updatedAt }}</p>\n                      <p>\n                        Name:\n                        <strong>{{ item.name }}</strong>\n                      </p>\n                      <p>KD: {{ item.KD }}</p>\n                      <p>GamerTag: {{ item.GamerTag }}</p>\n                      <p>Platform: {{ item.Platform }}</p>\n                    </v-card-text>\n                  </v-card>\n                </div>\n              </v-col>\n            </v-row>\n          </div>\n\n          <!-- No result -->\n          <div v-else class=\"no-result apollo\">No result :(</div>\n        </template>\n      </ApolloQuery>\n\n      <v-row>\n        <v-col>\n          <v-card-title>Search all items</v-card-title>\n          <v-text-field v-model=\"searchstring\" label=\"Search for an item...\"></v-text-field>\n        </v-col>\n      </v-row>\n      <!-- Apollo watched Graphql query -->\n      <ApolloQuery :query=\"require('../graphql/SearchGamer.gql')\" :variables=\"{ searchstring }\">\n        <template v-slot=\"{ result: { loading, error, data } }\">\n          <!-- Loading -->\n          <div v-if=\"loading\" class=\"loading apollo\">Loading...</div>\n\n          <!-- Error -->\n          <v-alert type=\"error\" v-else-if=\"error\" class=\"error apollo\">An error occured</v-alert>\n\n          <!-- Result -->\n          <div v-else-if=\"data\" class=\"result apollo\">\n            <v-row>\n              <v-col cols=\"3\" v-for=\"(item, i) in data.filterStat\" :key=\"i\">\n                <div class=\"mx-auto-name\" id=\"test\">\n                  <v-card class=\"mx-auto\" max-width=\"350\">\n                    <v-card-text>\n                      <p>Name: {{ item.name }}</p>\n                      <p>\n                        KD:\n                        <strong>{{ item.KD }}</strong>\n                      </p>\n                      <p>GamerTag: {{ item.GamerTag }}</p>\n                      <p>Platform: {{ item.Platform }}</p>\n                    </v-card-text>\n                  </v-card>\n                </div>\n              </v-col>\n            </v-row>\n          </div>\n          <!-- No result -->\n          <div v-else class=\"no-result apollo\">No result :(</div>\n        </template>\n      </ApolloQuery>\n    </v-container>\n\n    <!-- CREATE ITEM -->\n    <ApolloMutation\n      :mutation=\"require('../graphql/createStats.gql')\"\n      :variables=\"{\n      createName,\n      createGamerTag,\n      createKD,\n      createPlatform,\n      }\"\n      @done=\"onDone\"\n    >\n      <template v-slot=\"{ mutate, loading, error }\">\n        <!-- Form here -->\n        <v-form>\n          <v-container>\n            <v-card-title>Create an Item</v-card-title>\n            <v-row>\n              <v-col cols=\"6\" md=\"6\">\n                <v-text-field v-model=\"createName\" label=\"Name\" required filled></v-text-field>\n              </v-col>\n              <v-col cols=\"6\" md=\"6\">\n                <v-text-field v-model=\"createGamerTag\" label=\"GamerTag\" rows=\"4\" required filled></v-text-field>\n              </v-col>\n              <v-col cols=\"6\" md=\"6\">\n                <v-text-field v-model=\"createKD\" label=\"KD\" rows=\"4\" required filled></v-text-field>\n              </v-col>\n              <v-col cols=\"6\" md=\"6\">\n                <v-text-field\n                  v-model=\"createPlatform\"\n                  label=\"createPlatform\"\n                  rows=\"4\"\n                  required\n                  filled\n                ></v-text-field>\n              </v-col>\n            </v-row>\n            <v-btn large class=\"button\" :disabled=\"loading\" @click=\"mutate()\">Add Item</v-btn>\n            <p v-if=\"error\">An error occurred: {{ error }}</p>\n          </v-container>\n        </v-form>\n      </template>\n    </ApolloMutation>\n\n    <!-- UPDATE Gamer -->\n    <ApolloMutation\n      :mutation=\"require('../graphql/updateStats.gql')\"\n      :variables=\"{\n      id,\n      name,\n      GamerTag,\n      KD,\n      Platform\n        }\"\n      @done=\"onDone\"\n    >\n      <template v-slot=\"{ mutate, loading, error }\">\n        <!-- Form here -->\n        <v-form color=\"#ffffff\">\n          <v-container>\n            <v-card-title>Update Gamer</v-card-title>\n            <v-row>\n              <v-col cols=\"4\" md=\"4\">\n                <v-text-field v-model=\"id\" label=\"id\" required filled></v-text-field>\n              </v-col>\n              <v-col cols=\"4\" md=\"4\">\n                <v-text-field v-model=\"name\" label=\"name\" required filled></v-text-field>\n              </v-col>\n              <v-col cols=\"4\" md=\"4\">\n                <v-text-field v-model=\"GamerTag\" label=\"GamerTag\" required filled></v-text-field>\n              </v-col>\n              <v-col cols=\"4\" md=\"4\">\n                <v-text-field v-model=\"KD\" label=\"KD\" required filled></v-text-field>\n              </v-col>\n              <v-col cols=\"4\" md=\"4\">\n                <v-text-field v-model=\"Platform\" label=\"Platform\" required filled></v-text-field>\n              </v-col>\n            </v-row>\n\n            <v-btn large class=\"button\" :disabled=\"loading\" @click=\"mutate()\">Update Item</v-btn>\n            <p v-if=\"error\">An error occurred: {{ error }}</p>\n          </v-container>\n        </v-form>\n      </template>\n    </ApolloMutation>\n\n    <!-- DELETE PERSON -->\n    <ApolloMutation\n      :mutation=\"require('../graphql/DeleteOne.gql')\"\n      :variables=\"{\n        deleteID,\n        }\"\n      @done=\"onDone\"\n    >\n      <template v-slot=\"{ mutate, loading, error }\">\n        <!-- Form here -->\n        <v-form>\n          <v-container>\n            <v-card-title>Delete an Item</v-card-title>\n            <v-row>\n              <v-col cols=\"12\" md=\"12\">\n                <v-text-field class=\"form\" v-model=\"deleteID\" label=\"id\" required filled></v-text-field>\n              </v-col>\n            </v-row>\n\n            <v-btn large class=\"button\" :disabled=\"loading\" @click=\"mutate()\">Delete Gamer</v-btn>\n            <p v-if=\"error\">An error occurred: {{ error }}</p>\n          </v-container>\n        </v-form>\n      </template>\n    </ApolloMutation>\n  </div>\n</template>\n  \n\n<script>\nexport default {\n  data: () => ({\n    idInput: \"\",\n    updatedAt: \"\",\n    name: \"\",\n    KD: \"\",\n    GamerTag: \"\",\n    Platform: \"\",\n    id: \"\",\n    searchstring: \"akprice95\",\n    createName: \"\",\n    createGamerTag: \"\",\n    createKD: \"\",\n    createPlatform: \"\",\n    deleteID: \"\"\n  }),\n  methods: {\n    onDone() {\n      return console.log(\"Done\" + \"did it work?\");\n    }\n  }\n};\n</script>\n\n<style scoped>\n.result {\n  padding: 1rem;\n}\n\n.statsStyle {\n  font-size: 1.25rem;\n  font-weight: 600;\n}\n\n.title {\n  font-weight: bold;\n  text-transform: uppercase;\n}\n\n.bold {\n  font-size: 1.5em;\n}\n\n.mx-auto {\n  background: #76b6cc;\n  box-shadow: 0 10px 12px 0 rgba(0, 0, 0, 0.2);\n  transition: 0.3s;\n  text-align: left;\n}\n\n.mx-auto:hover {\n  box-shadow: 12px 16px 10px rgba(0, 0, 0, 0.2);\n  background: #49869c;\n}\n\n.mx-auto-name {\n  width: 100%;\n  background: white;\n  text-align: left;\n  padding: 10px 15px;\n}\n\n.mx-auto-actions {\n  background: white;\n}\n</style>"]}]}